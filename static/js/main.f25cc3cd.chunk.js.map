{"version":3,"sources":["serviceWorker.js","features/views/Dashboard/fragments/GeologicalMapFragment.tsx","features/views/Dashboard/fragments/PickersBarFragment.tsx","features/views/Dashboard/dashboardSlice.ts","features/views/Dashboard/fragments/WeatherChartFragment/index.tsx","features/views/Dashboard/index.tsx","router/MainRouter.tsx","themes/dark-theme.ts","app/App.tsx","features/helpers/geolocation/geolocationSlice.ts","store/rootReducer.ts","api/geolocation-api.ts","features/helpers/geolocation/geolocationSaga.ts","api/rest-api.ts","features/views/Dashboard/dashboardSaga.ts","store/rootSaga.ts","store/index.ts","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","geoMapBox","overflow","geologicalMap","coord","marginLeft","spacing","containerStyle","width","height","GeologicalMap","memo","onChange","classes","React","useState","setMap","lat","lng","markerLatLng","setMarkerLatLng","coords","useSelector","state","dashboard","forecastRequestParams","shallowEqual","useEffect","onLoad","useCallback","map","setCenter","onUnmount","handleGoogleMapClicked","e","latLng","Math","round","min","max","Grid","item","container","direction","xs","Box","className","borderRadius","googleMapsApiKey","process","mapContainerStyle","options","mapTypeControl","streetViewControl","fullscreenControl","zoom","onClick","position","Typography","component","toFixed","formControl","minWidth","dateFormControl","maxWidth","PickersBarFragment","selectedDate","selectedWeatherParam","utils","DateFnsUtils","margin","id","label","format","minDate","Date","maxDate","addDays","value","date","KeyboardButtonProps","FormControl","InputLabel","Select","labelId","event","weatherParam","target","MenuItem","initialState","forecastResults","forecastResultParams","dashboardSlice","createSlice","name","reducers","setForecastRequestParams","action","payload","setCoords","setForecastResult","actions","weatherParams","Map","param","tooltip","padding","display","paddingLeft","content","left","top","transform","backgroundColor","WeatherChartFragment","get","units","datum","data","wrapperStyle","contentStyle","type","dataKey","stroke","dot","activeDot","r","strokeWidth","vertical","domain","axisLine","tick","tickFormatter","tickCount","tickLine","offset","angle","CustomizedTooltip","active","paramData","console","error","style","listStyle","LocationHelper","forecastRequestParamsRef","dispatch","useDispatch","history","useHistory","useLocation","currentCoordsRef","useRef","statusToGetCoordsFromUrl","setStatusToGetCoordsFromUrl","search","searchParams","URLSearchParams","parseFloat","isNaN","roundedLat","roundedLng","normalizedLat","normalizedLng","currentCoords","current","message","set","path","pathname","toString","replace","log","Dashboard","handleChange","values","MainRouter","to","darkTheme","palette","background","default","overrides","MuiCssBaseline","ul","p","createMuiTheme","root","App","ThemeProvider","CssBaseline","Container","geolocationSlice","getClientGeolocation","setClientGeolocation","latitude","longitude","rootReducer","combineReducers","geolocation","geolocationReducer","dashboardReducer","getClientLocation","a","navigator","Promise","resolve","reject","getCurrentPosition","Error","getClientGeolocationSaga","call","put","watchGetClientGeolocationSaga","takeLeading","instance","require","create","baseURL","timeout","headers","restApi","GET","url","getHourlyWeatherSaga","results","dashboardSaga","rootSaga","sagas","all","saga","spawn","sagaMiddleware","createSagaMiddleware","reduxStore","configureStore","reducer","middleware","run","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f25cc3cd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App.tsx is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {memo, useCallback, useEffect} from \"react\";\r\nimport {Box, createStyles, Grid, Theme, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {GoogleMap, LoadScript, Marker} from '@react-google-maps/api';\r\nimport {shallowEqual, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../store/rootReducer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    geoMapBox: {\r\n      overflow: 'hidden'\r\n    },\r\n    geologicalMap: {},\r\n    coord: {\r\n      '&+&': {\r\n        marginLeft: theme.spacing(2)\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\ninterface IProps {\r\n  onChange: (values: any) => void,\r\n  rest?: any\r\n}\r\n\r\nconst GeologicalMap = memo(({onChange, ...rest}: IProps) => {\r\n  const classes = useStyles();\r\n  const [map, setMap] = React.useState(null)\r\n  const [markerLatLng, setMarkerLatLng] = React.useState(() => ({lat: 0, lng: 0}));\r\n  const coords = useSelector((state: RootState) => state.dashboard.forecastRequestParams.coords, shallowEqual);\r\n\r\n\r\n  useEffect(()=>{\r\n    setMarkerLatLng(coords);\r\n  }, [coords]);\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    // const bounds = new (window as any).google.maps.LatLngBounds();\r\n    // bounds.extend(coords);\r\n    // map.fitBounds(bounds);\r\n\r\n    setMap(map)\r\n    map.setCenter(coords);\r\n  }, [coords])\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null)\r\n  }, [])\r\n\r\n  const handleGoogleMapClicked = useCallback((e: any) => {\r\n    const latLng = e.latLng;\r\n    const lat = Math.round(latLng.lat() * 1e7) / 1e7;\r\n    const lng = Math.round(latLng.lng() * 1e7) / 1e7;\r\n    setMarkerLatLng({lat, lng});\r\n    onChange && onChange({\r\n      coords: {\r\n        lat: Math.min(Math.max(-90, lat), 90),\r\n        lng: Math.min(Math.max(-180, lng), 180)\r\n      }})\r\n  }, [onChange]);\r\n\r\n\r\n  return (\r\n    <Grid item container direction={'column'} spacing={3}>\r\n      <Grid item xs>\r\n        <Box className={classes.geoMapBox} borderRadius={8}>\r\n          {\r\n            coords.lat &&\r\n            <LoadScript\r\n              googleMapsApiKey={process.env.REACT_APP_GOOGLE_API}\r\n            >\r\n              <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                options={{\r\n                  mapTypeControl: false,\r\n                  streetViewControl: false,\r\n                  fullscreenControl: false,\r\n                }}\r\n                zoom={10}\r\n                onLoad={onLoad}\r\n                onUnmount={onUnmount}\r\n                onClick={handleGoogleMapClicked}\r\n              >\r\n                <Marker position={markerLatLng}/>\r\n              </GoogleMap>\r\n            </LoadScript>\r\n          }\r\n        </Box>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography component={'span'} className={classes.coord}>\r\n          {\r\n            coords.lat.toFixed(7)\r\n          }\r\n        </Typography>\r\n        <Typography component={'span'} className={classes.coord}>\r\n          {\r\n            coords.lng.toFixed(7)\r\n          }\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n});\r\n\r\nexport default GeologicalMap;","import React, {memo} from \"react\";\r\nimport {createStyles, FormControl, Grid, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {shallowEqual, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../store/rootReducer\";\r\nimport addDays from 'date-fns/addDays';\r\n\r\nconst useStyles = makeStyles(theme =>\r\n  createStyles({\r\n    formControl: {\r\n      // margin: theme.spacing(1),\r\n      minWidth: 200,\r\n    },\r\n    dateFormControl: {\r\n      minWidth: 200,\r\n      maxWidth: 200\r\n    }\r\n  })\r\n)\r\n\r\ninterface IProps {\r\n  onChange?: (values: any) => void\r\n}\r\n\r\nconst PickersBarFragment = memo(({onChange}: IProps)=>{\r\n  const classes = useStyles();\r\n  const [selectedDate, selectedWeatherParam] = useSelector((state: RootState) => [\r\n    state.dashboard.forecastRequestParams.selectedDate,\r\n    state.dashboard.forecastRequestParams.selectedWeatherParam\r\n  ], shallowEqual);\r\n\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    if (date !== null) {\r\n      onChange && onChange({selectedDate: date});\r\n    }\r\n  };\r\n\r\n  const handleParameterChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const weatherParam = event.target.value as string;\r\n    onChange && onChange({selectedWeatherParam: weatherParam});\r\n  };\r\n\r\n  return (\r\n    <Grid item container direction={'row'} spacing={2}>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid item>\r\n          <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            className={classes.dateFormControl}\r\n            id=\"date-picker-dialog\"\r\n            label=\"Date\"\r\n            format=\"MM/dd/yyyy\"\r\n            minDate={new Date()}\r\n            maxDate={addDays(new Date(), 3)}\r\n            value={selectedDate}\r\n            onChange={handleDateChange}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'pick date',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n      <Grid item>\r\n        <FormControl className={classes.formControl} margin={'normal'}>\r\n          <InputLabel id=\"weather-params-select-label\">Parameter</InputLabel>\r\n          <Select\r\n            labelId=\"weather-params-select-label\"\r\n            id=\"weather-params-select\"\r\n            value={selectedWeatherParam}\r\n            onChange={handleParameterChange}\r\n          >\r\n            <MenuItem value={'temp'}>Temp</MenuItem>\r\n            <MenuItem value={'wind_speed'}>Wind speed</MenuItem>\r\n            <MenuItem value={'precipitation'}>Precipitation</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n})\r\n\r\nexport default PickersBarFragment;","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\ntype TWeatherParam = 'temp' | 'wind_speed' | 'precipitation';\r\n\r\nexport interface IForecastRequestParams {\r\n  coords: {lat: number, lng: number},\r\n  selectedDate: Date,\r\n  selectedWeatherParam: TWeatherParam\r\n}\r\n\r\ninterface IInitialState {\r\n  forecastRequestParams: IForecastRequestParams,\r\n  forecastResults: null | Array<IForecastDatum>,\r\n  forecastResultParams: null | IForecastRequestParams\r\n}\r\n\r\ninterface IForecastDatum {\r\n  lat: number,\r\n  lon: number,\r\n  observation_time: {value: string},\r\n  temp?: {\r\n    value: number,\r\n    unit: 'C' | 'F'\r\n  }\r\n}\r\n\r\nconst initialState: IInitialState = {\r\n  forecastRequestParams: {\r\n    coords: {\r\n      lat: 35,\r\n      lng: -86.5\r\n    },\r\n    selectedDate: new Date,\r\n    selectedWeatherParam: 'temp'\r\n  },\r\n  forecastResults: null,\r\n\r\n  forecastResultParams: null\r\n};\r\n\r\n\r\nconst dashboardSlice = createSlice({\r\n  name: 'dashboard',\r\n  initialState,\r\n  reducers: {\r\n    setForecastRequestParams: (state, action: PayloadAction<IForecastRequestParams>) => {\r\n      const {coords, selectedDate, selectedWeatherParam} = action.payload;\r\n      if (coords) state.forecastRequestParams.coords = coords;\r\n      if (selectedDate) state.forecastRequestParams.selectedDate = selectedDate;\r\n      if (selectedWeatherParam) state.forecastRequestParams.selectedWeatherParam = selectedWeatherParam;\r\n    },\r\n    setCoords: (state, action: PayloadAction<{lat: number, lng: number}>) => {\r\n      const {lat, lng} = action.payload;\r\n      state.forecastRequestParams.coords.lat = lat;\r\n      state.forecastRequestParams.coords.lng = lng;\r\n    },\r\n    setForecastResult: (state, action:\r\n      PayloadAction<{forecastResults: Array<IForecastDatum>, forecastResultParams: IForecastRequestParams }>) => {\r\n      const {forecastResults, forecastResultParams} = action.payload;\r\n      state.forecastResults = forecastResults;\r\n      state.forecastResultParams = forecastResultParams;\r\n    }\r\n  }\r\n})\r\n\r\nexport default dashboardSlice.reducer;\r\n\r\nexport const {setForecastRequestParams, setForecastResult, setCoords} = dashboardSlice.actions;\r\n\r\ninterface IWeatherParamEnhanced {\r\n  param: TWeatherParam,\r\n  value: string\r\n}\r\n\r\nexport const weatherParams = new Map<string, IWeatherParamEnhanced>([\r\n  ['temp', {param: 'temp', value: 'Temperature'}],\r\n  ['wind_speed', {param: 'wind_speed', value: 'Wind speed'}],\r\n  ['precipitation', {param: 'precipitation', value: 'Precipitation'}],\r\n]);","import React, {memo} from \"react\";\r\nimport {createStyles, Grid} from \"@material-ui/core\";\r\nimport {CartesianGrid, Dot, Label, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {shallowEqual, useSelector} from \"react-redux\";\r\nimport {format} from 'date-fns';\r\nimport {RootState} from \"../../../../../store/rootReducer\";\r\nimport {weatherParams} from \"../../dashboardSlice\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    tooltip: {\r\n      padding: '0.5rem 1rem',\r\n    },\r\n    label: {\r\n      display: 'inline-block',\r\n      position: 'relative',\r\n      paddingLeft: theme.spacing(2),\r\n      '&::before': {\r\n        content: `''`,\r\n        position: 'absolute',\r\n        left: 0,\r\n        borderRadius: '50%',\r\n        height: '8px',\r\n        width: '8px',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        backgroundColor: 'rgba(0,114,245,1)'\r\n      }\r\n    }\r\n  })\r\n)\r\n\r\n\r\nconst WeatherChartFragment = memo(() => {\r\n  const [forecastResults, forecastResultParams] = useSelector((state: RootState) => [\r\n    state.dashboard.forecastResults,\r\n    state.dashboard.forecastResultParams\r\n  ], shallowEqual);\r\n\r\n  let weatherParam = null;\r\n  if (forecastResultParams != null) {\r\n    weatherParam = weatherParams.get((forecastResultParams as any).selectedWeatherParam);\r\n  }\r\n  let units = '';\r\n  if (forecastResults && weatherParam) {\r\n    const datum = (forecastResults as any)[0] as any;\r\n    if (datum) {\r\n      units = datum[weatherParam.param]?.units;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container item>\r\n      <ResponsiveContainer height={300}>\r\n        <LineChart data={forecastResults as Array<any> || []}>\r\n          <Tooltip wrapperStyle={{\r\n            backgroundColor: 'rgba(48,47,79,1)',\r\n            borderRadius: '4px'\r\n          }}\r\n                   contentStyle={{\r\n                     backgroundColor: 'transparent'\r\n                   }}\r\n                   content={<CustomizedTooltip weatherParam={weatherParam}/>}\r\n          />\r\n          <Line type=\"natural\"\r\n                dataKey={`${weatherParam && weatherParam.param}.value`}\r\n                stroke=\"#0072F5\"\r\n                width={2}\r\n                dot={false}\r\n                activeDot={{r: 4, strokeWidth: 8, stroke: `rgba(0,114,245,.5)`}}\r\n          />\r\n          <CartesianGrid stroke=\"rgba(255,255,255,0.14)\" vertical={false} />\r\n          <XAxis dataKey=\"observation_time.value\"\r\n                 domain={['dataMin', 'dataMax']}\r\n                 axisLine={false} tick={true}\r\n                 tickFormatter={date => format(new Date(date), 'h:mm a')}\r\n          />\r\n          <YAxis width={50}\r\n                 axisLine={false} tickCount={4}\r\n                 stroke={'rgba(255,255,255,0.5)'}\r\n                 domain={['auto', 'auto']}\r\n                 tickLine={false} >\r\n            <Label value={units}\r\n                   offset={0} position=\"left\" angle={-90} stroke={'rgba(255,255,255,1)'} />\r\n          </YAxis>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </Grid>\r\n  );\r\n});\r\n\r\nexport default WeatherChartFragment;\r\n\r\n\r\nconst CustomizedTooltip = ({ active, payload, label, weatherParam }:\r\n                             {active?: boolean, payload?: Array<any>, label?: string | number, weatherParam: any }) => {\r\n  const classes = useStyles();\r\n  let paramData = null;\r\n  if (payload && payload[0] && weatherParam) {\r\n    paramData = payload[0].payload[weatherParam.param];\r\n  }\r\n  let date = null;\r\n  if (label) {\r\n    try {\r\n      date = new Date(label)\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  if (active) {\r\n    return (\r\n      <div className={classes.tooltip}>\r\n        <p><b>{date && format(date, 'iii, MMM d, h:mm a')}</b></p>\r\n        <ul style={{\r\n          listStyle: 'none',\r\n          padding: 0\r\n        }}>\r\n          <li className={classes.label}>\r\n            {`${weatherParam && weatherParam.value} ${paramData ? `${paramData.value} ${paramData.units}` : ''}`}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","import React, {memo, useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {useLocation, useHistory} from 'react-router-dom';\r\nimport GeologicalMap from \"./fragments/GeologicalMapFragment\";\r\nimport {shallowEqual, useDispatch, useSelector} from \"react-redux\";\r\nimport {getClientGeolocation, setClientGeolocation} from \"../../helpers/geolocation/geolocationSlice\";\r\nimport {RootState} from \"../../../store/rootReducer\";\r\nimport PickersBarFragment from \"./fragments/PickersBarFragment\";\r\nimport WeatherChartFragment from \"./fragments/WeatherChartFragment\";\r\nimport {setForecastRequestParams, setCoords} from \"./dashboardSlice\";\r\nimport {current} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst Dashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const forecastRequestParams = useSelector((state: RootState) => state.dashboard.forecastRequestParams);\r\n  const forecastRequestParamsRef = useRef(forecastRequestParams);\r\n\r\n\r\n  useEffect(()=>{\r\n    forecastRequestParamsRef.current = forecastRequestParams;\r\n  },[forecastRequestParams])\r\n  \r\n  useEffect(()=>{\r\n    // dispatch(setForecastRequestParams(forecastRequestParamsRef.current))\r\n  }, [dispatch])\r\n  \r\n  const handleChange = useCallback((values) => {\r\n    dispatch(setForecastRequestParams({...forecastRequestParamsRef.current, ...values}))\r\n  }, [dispatch]);\r\n\r\n\r\n  return (\r\n    <Grid direction={'column'} container spacing={3}>\r\n      <Grid item >\r\n        <GeologicalMap onChange={handleChange}/>\r\n        <LocationHelper forecastRequestParamsRef={forecastRequestParamsRef}/>\r\n      </Grid>\r\n      <Grid item>\r\n        <PickersBarFragment onChange={handleChange}/>\r\n      </Grid>\r\n      <Grid item>\r\n        <WeatherChartFragment/>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst LocationHelper = memo(({forecastRequestParamsRef}: any)=>{\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const coords = useSelector((state: RootState) => state.dashboard.forecastRequestParams.coords, shallowEqual);\r\n  const currentCoordsRef = useRef<{lat: null | number, lng: null | number}>({lat: null, lng: null});\r\n  const [statusToGetCoordsFromUrl, setStatusToGetCoordsFromUrl] = useState<'pending' | 'resolved'>('pending')\r\n\r\n\r\n  // update coords only if url was manually changed (initializing included)\r\n  useEffect(() => {\r\n    try {\r\n      if (location.search) {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const lat = parseFloat(searchParams.get('lat') as string);\r\n        const lng = parseFloat(searchParams.get('lng') as string);\r\n        if (!isNaN(lat) && !isNaN(lng)) {\r\n          const roundedLat = Math.round(lat * 1e7) / 1e7;\r\n          const roundedLng = Math.round(lng * 1e7) / 1e7;\r\n          const normalizedLat = Math.min(Math.max(-90, roundedLat), 90);\r\n          const normalizedLng = Math.min(Math.max(-180, roundedLng), 180);\r\n          const currentCoords = currentCoordsRef.current;\r\n          // skip if current effect was fired due to useLocation \"noticed\" url was synced with store coords,\r\n          // hence url coords === store coords, it fires only initially if coords search params are present\r\n          if (normalizedLat !== currentCoords.lat || normalizedLng !== currentCoords.lng) {\r\n            // dispatch(setCoords({\r\n            //   lat: normalizedLat,\r\n            //   lng: normalizedLng\r\n            // }))\r\n            currentCoordsRef.current = {\r\n              lat: coords.lat,\r\n              lng: coords.lng\r\n            };\r\n            dispatch(setForecastRequestParams({\r\n              ...forecastRequestParamsRef.current,\r\n              coords: {\r\n                lat: normalizedLat,\r\n                lng: normalizedLng\r\n              }\r\n            }))\r\n          }\r\n        } else {\r\n          // dispatch(getClientGeolocation());\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    } finally {\r\n      setStatusToGetCoordsFromUrl('resolved');\r\n    }\r\n  }, [dispatch, location.search])\r\n\r\n  // update url on coords changed\r\n  useEffect(() => {\r\n    if (statusToGetCoordsFromUrl === 'resolved') {\r\n      const currentCoords = currentCoordsRef.current;\r\n      try {\r\n        if (currentCoords.lat !== coords.lat || currentCoords.lng === coords.lng) {\r\n          if (currentCoords.lat === null || currentCoords.lng === null) {\r\n            dispatch(setForecastRequestParams({\r\n              ...forecastRequestParamsRef.current,\r\n              coords: {\r\n                lat: coords.lat,\r\n                lng: coords.lng\r\n              }\r\n            }))\r\n          }\r\n          currentCoordsRef.current = {\r\n            lat: coords.lat,\r\n            lng: coords.lng\r\n          };\r\n          const searchParams = new URLSearchParams(location.search);\r\n          searchParams.set('lat', coords.lat.toFixed(7));\r\n          searchParams.set('lng', coords.lng.toFixed(7));\r\n          const path = `${location.pathname}?${searchParams.toString()}`;\r\n          history.replace(path);\r\n        }\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [statusToGetCoordsFromUrl, coords.lat, coords.lng, history, location.pathname, location.search]);\r\n\r\n\r\n  return null;\r\n})\r\n\r\n\r\nexport default Dashboard;","import * as React from \"react\";\r\nimport {BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\r\nimport Dashboard from \"../features/views/Dashboard\";\r\n\r\n\r\nconst MainRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Route path={'/weather'}>\r\n        <Dashboard/>\r\n      </Route>\r\n      <Redirect to={'/weather'} />\r\n    </Router>\r\n  )\r\n}\r\nexport default MainRouter;","import {ThemeOptions} from \"@material-ui/core\";\r\n\r\nconst darkTheme: ThemeOptions = {\r\n  palette: {\r\n    type: 'dark',\r\n    background: {\r\n      default: '#131224'\r\n    }\r\n  },\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      '@global': {\r\n        ul: {\r\n          margin: 0\r\n        },\r\n        p: {\r\n          margin: 0,\r\n          padding: 0,\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default darkTheme;","import {Container, createMuiTheme, ThemeProvider, CssBaseline, createStyles} from '@material-ui/core';\nimport React from 'react';\nimport MainRouter from \"../router/MainRouter\";\nimport darkTheme from \"../themes/dark-theme\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme(darkTheme);\n\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    padding: 20,\n    width: 'auto'\n  }\n}))\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <Container className={classes.root}>\n        <MainRouter/>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\ninterface IInitialState {\r\n  lat: number,\r\n  lng: number\r\n}\r\n\r\nconst initialState: IInitialState = {\r\n  lat: -1000,\r\n  lng: -1000,\r\n}\r\n\r\n\r\nconst geolocationSlice = createSlice({\r\n  name: 'geolocation',\r\n  initialState,\r\n  reducers: {\r\n    getClientGeolocation: state => state,\r\n    setClientGeolocation: (state, {payload}: PayloadAction<{coords: Coordinates}>) => {\r\n      state.lat = payload.coords.latitude;\r\n      state.lng = payload.coords.longitude;\r\n    },\r\n  }\r\n})\r\n\r\n\r\nexport const {getClientGeolocation, setClientGeolocation} = geolocationSlice.actions;\r\nexport default geolocationSlice.reducer;\r\n","import {combineReducers} from \"redux\";\r\nimport geolocationReducer from \"../features/helpers/geolocation/geolocationSlice\";\r\nimport dashboardReducer from \"../features/views/Dashboard/dashboardSlice\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  geolocation: geolocationReducer,\r\n  dashboard: dashboardReducer\r\n})\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\n\r\n","\r\nconst getClientLocation = async (): Promise<Position> => {\r\n  if (navigator.geolocation) {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(position);\r\n          resolve(position);\r\n        },\r\n        error => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  } else {\r\n    throw new Error('Cannot get geolocation');\r\n  }\r\n}\r\n\r\nexport default getClientLocation;\r\n","import {call, put, takeLeading} from 'redux-saga/effects';\r\nimport getClientLocation from \"../../../api/geolocation-api\";\r\nimport {getClientGeolocation, setClientGeolocation} from \"./geolocationSlice\";\r\n\r\n\r\nconst getClientGeolocationSaga = function* () {\r\n  let position: Position | null = null;\r\n  try {\r\n    position = yield call(getClientLocation);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n  if (position !== null) {\r\n    yield put(setClientGeolocation({coords: position.coords}));\r\n    console.log(position.coords);\r\n  }\r\n}\r\n\r\nconst watchGetClientGeolocationSaga = function* () {\r\n  yield takeLeading(getClientGeolocation, getClientGeolocationSaga)\r\n}\r\n\r\nexport default watchGetClientGeolocationSaga;","\r\nconst axios = require('axios').default;\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_CLIMACELL_BASE_URL,\r\n  timeout: 60000,\r\n  headers: {\r\n    'content-type': 'application/json',\r\n    'apikey': process.env.REACT_APP_CLIMACELL_API\r\n  }\r\n});\r\n\r\n\r\nconst restApi = {\r\n  GET(url: string) {\r\n    const res = instance.get(url);\r\n    return res;\r\n  }\r\n};\r\n\r\n\r\nexport default restApi;\r\n\r\nconst res = {\r\n  data: [{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.63,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T09:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.95,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T10:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.17,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T11:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.37,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T12:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.47,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T13:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.64,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T14:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.79,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T15:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.01,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T16:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.24,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T17:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.26,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T18:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T19:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.33,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T20:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T21:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.29,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T22:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.33,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-01T23:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.19,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T00:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.86,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T01:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.74,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T02:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.56,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T03:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.35,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T04:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.08,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T05:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.1,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T06:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.03,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T07:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.15,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T08:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.24,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T09:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.33,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T10:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.39,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T11:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.45,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T12:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.59,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T13:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.83,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T14:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.94,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T15:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.81,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T16:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.82,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T17:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.93,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T18:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.03,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T19:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.67,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T20:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T21:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.32,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T22:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.29,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-02T23:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.43,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T00:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.48,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T01:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.22,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T02:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.19,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T03:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.12,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T04:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.74,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T05:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.6,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T06:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.56,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T07:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.71,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T08:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.9,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T09:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.07,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T10:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.3,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T11:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.56,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T12:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.82,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T13:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.05,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T14:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.23,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T15:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.4,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T16:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.49,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T17:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.53,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T18:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.48,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T19:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.43,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T20:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.39,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T21:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.34,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T22:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.3,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-03T23:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.3,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T00:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.22,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T01:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.86,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T02:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.4,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T03:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.27,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T04:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.83,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T05:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.85,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T06:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.85,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T07:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":23.85,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T08:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.47,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T09:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.47,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T10:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.47,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T11:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T12:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T13:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T14:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.21,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T15:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.21,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T16:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.21,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T17:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T18:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T19:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.31,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T20:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.14,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T21:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.14,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T22:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":25.14,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-04T23:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.98,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T00:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.98,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T01:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.98,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T02:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.45,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T03:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.45,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T04:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.45,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T05:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.19,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T06:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.19,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T07:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.19,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T08:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.24,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T09:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.24,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T10:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.24,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T11:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.57,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T12:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.57,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T13:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.57,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T14:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.86,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T15:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.86,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T16:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.86,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T17:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T18:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T19:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T20:00:00.000Z\"}},{\"lat\":40,\"lon\":10,\"temp\":{\"value\":24.87,\"units\":\"C\"},\"observation_time\":{\"value\":\"2020-09-05T21:00:00.000Z\"}}]\r\n}\r\n\r\n","import {call, put, takeLeading} from 'redux-saga/effects';\r\nimport {IForecastRequestParams, setForecastRequestParams, setForecastResult} from './dashboardSlice';\r\nimport restApi from \"../../../api/rest-api\";\r\nimport {PayloadAction} from \"@reduxjs/toolkit\";\r\nimport format from 'date-fns/format'\r\n\r\n\r\n\r\nconst getHourlyWeatherSaga = function* (action: PayloadAction<IForecastRequestParams>) {\r\n  const {coords: {lat, lng}, selectedDate, selectedWeatherParam} = action.payload;\r\n  let results: any = null;\r\n\r\n  const url = `/hourly?lat=${lat}&lon=${lng}&unit_system=si&start_time=${selectedDate ? format(selectedDate, \"yyyy-MM-dd'T'HH:mm:ss'Z'\") : 'now'}&fields=${selectedWeatherParam}`;\r\n  try {\r\n    results = yield call(restApi.GET,url);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n  if (results && results.data !== null) {\r\n    yield put(setForecastResult({forecastResults: results.data, forecastResultParams: action.payload}));\r\n  }\r\n}\r\n\r\nconst dashboardSaga = function* () {\r\n  yield takeLeading(setForecastRequestParams, getHourlyWeatherSaga)\r\n}\r\n\r\nexport default dashboardSaga;","import {all, call, spawn} from 'redux-saga/effects';\r\nimport watchGetClientGeolocationSaga from \"../features/helpers/geolocation/geolocationSaga\";\r\nimport dashboardSaga from \"../features/views/Dashboard/dashboardSaga\";\r\n\r\n\r\nconst rootSaga = function* () {\r\n  const sagas: any[] = [\r\n    watchGetClientGeolocationSaga,\r\n    dashboardSaga,\r\n  ];\r\n  yield all(sagas.map(saga=>\r\n    spawn(function *() {\r\n        while (true) {\r\n          try {\r\n            yield call(saga)\r\n            break;\r\n          } catch (e) {\r\n            console.error(e);\r\n          }\r\n        }\r\n      }\r\n    )\r\n  ))\r\n}\r\n\r\nexport default rootSaga;","import rootReducer from \"./rootReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst reduxStore = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [\r\n    sagaMiddleware,\r\n  ],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n\r\nexport default reduxStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport reduxStore from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={reduxStore}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}